// SCSS mixins
// ---------------------------------------

// Global variables used in mixins.

// Number of breakpoints.
$sassline-breakpoints-limit: length($sassline-breakpoints);

// List of rootsizes, breakpoints, and max-widths.
$sassline-sizes: map-values($sassline-rootsizes);
$sassline-points: map-values($sassline-breakpoints);
$sassline-line-widths: map-values($sassline-measures);
$sassline-max-widths: map-values($sassline-maxwidths);


// Breakpoints. Either set one to one of the breakpoint variables, or use a custom value for minor breakpoints.
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin sassline-breakpoint($sassline-break: 0, $max: 0) {
  // Type of break variable
  $sassline-value: type-of($sassline-break);

  // If it is a string (i.e. a breakpoint variable).
  @if $sassline-value == string {
    // If using 'break-1', 'break-2' etc output the correct breakpoints from map.
    @if map-has-key($sassline-breakpoints, $sassline-break) {
      @media screen and (min-width: #{map-get($sassline-breakpoints, $sassline-break) / 16 * 1em} ) { @content; }
    } @else {
      @warn "#{$sassline-break} is not a set breakpoint variable";
    }

  // If it is a number, use this for the breakpoint.
  } @else if $sassline-value == number {
    // If using other numbers output value in ems either for min, min & max or max width breakpoints.
    $query: "all" !default;
    @if      $sassline-break != 0 and $max != 0 { $query: "(min-width: #{$sassline-break / 16 * 1em}) and (max-width: #{$max / 16 * 1em})"; }
    @else if $sassline-break != 0 and $max == 0 { $query: "(min-width: #{$sassline-break / 16 * 1em})"; }
    @else if $sassline-break == 0 and $max != 0 { $query: "(max-width: #{$max / 16 * 1em})"; }
    @media #{$query} { @content; }

  } @else {
    @warn "#{$sassline-break} is not valid to use as a breakpoint";
  }
}

// Root font-size in %, outputted in correct breakpoints.
@mixin sassline-rootsize {
  font-size: nth($sassline-sizes, 1) / 16 * 100%;

  // Loop through breakpoints.
  @for $i from 2 through $sassline-breakpoints-limit {
    @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
      font-size: nth($sassline-sizes, $i) / 16 * 100%;
    }
  }
}

// Max-widths for typeset containers, outputted in correct breakpoints.
@mixin sassline-maxwidth($sassline-breakpoint: 0) {
  // Type of chosen variables.
  $sassline-break-value: type-of($sassline-breakpoint);

  // If specifying a breakpoint to use (and breakpoint exists).
  @if $sassline-break-value == number and $sassline-breakpoint <= ($sassline-breakpoints-limit - 1) and $sassline-breakpoint >= 0 {

    max-width: #{nth($sassline-max-widths, ($sassline-breakpoint + 1)) / nth($sassline-sizes, ($sassline-breakpoint + 1))}rem;

  } @else if $sassline-breakpoint == all {
    max-width: #{nth($sassline-max-widths, 1) / nth($sassline-sizes, 1)}rem;

    // Loop through breakpoints.
    @for $i from 2 through $sassline-breakpoints-limit {
      @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
        max-width: #{nth($sassline-max-widths, $i) / nth($sassline-sizes, $i)}rem;
      }
    }
  }
}

// Set the measure for single columns, outputted in correct breakpoints.
@mixin sassline-measure($sassline-breakpoint: 0) {
  // Type of chosen variables.
  $sassline-break-value: type-of($sassline-breakpoint);

  // If specifying a breakpoint to use (and breakpoint exists).
  @if $sassline-break-value == number and $sassline-breakpoint <= ($sassline-breakpoints-limit - 1) and $sassline-breakpoint >= 0 {

    max-width: #{nth($sassline-line-widths, ($sassline-breakpoint + 1)) / nth($sassline-sizes, ($sassline-breakpoint + 1))}rem;

  } @else if $sassline-breakpoint == all {
    max-width: #{nth($sassline-line-widths, 1) / nth($sassline-sizes, 1)}rem;

    // Loop through breakpoints.
    @for $i from 2 through $sassline-breakpoints-limit {
      @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
        max-width: #{nth($sassline-line-widths, $i) / nth($sassline-sizes, $i)}rem;
      }
    }
  }
}

// Calculate percentage width of container to get optimal measure for main text columns.
// Defaults to all breakpoints.
// Note: will not output for base breakpoint as this comes from the 'measure' mixin.
@mixin sassline-ideal-measure($sassline-breakpoint: 0, $sassline-gutter: 0, $sassline-main: true, $sassline-output: max-width) {
  // Type of chosen variables.
  $sassline-break-value: type-of($sassline-breakpoint);

  // If specifying a breakpoint to use (and breakpoint exists and is larger than 0).
  @if $sassline-break-value == number and $sassline-breakpoint <= ($sassline-breakpoints-limit - 1) and $sassline-breakpoint > 0 {

    @if $sassline-gutter == small {
      $sassline-gutter: map-get($sassline-gutterwidths, small) * 2 / 1rem;
    } @else if $sassline-gutter == medium {
      $sassline-gutter: map-get($sassline-gutterwidths, medium) * 2 / 1rem;
    } @else if $sassline-gutter == large {
      $sassline-gutter: map-get($sassline-gutterwidths, large) * 2 / 1rem;
    } @else {
      $sassline-gutter: 0;
    }

    $sassline-rootsize: map-get($sassline-rootsizes, rootsize-#{$sassline-breakpoint});
    $sassline-ideal-measure: map-get($sassline-measures, measure-#{$sassline-breakpoint});
    $sassline-gutter-size: ($sassline-gutter * $sassline-rootsize);
    $sassline-container-width: map-get($sassline-maxwidths, width-#{$sassline-breakpoint});

    $sassline-percentage: percentage(($sassline-ideal-measure + $sassline-gutter-size) / $sassline-container-width);

    @if $sassline-percentage < 55 {
      $sassline-percentage: 55%;
    } @else if $sassline-percentage > 65 {
      $sassline-percentage: 65%;
    }

    @if $sassline-main == false {
      $sassline-percentage: 100 - $sassline-percentage;
    }

    #{$sassline-output}: $sassline-percentage;
  }
}

// Value in scale in $sassline-modular-scale?
// Used in following fontsize mixin.
@function sassline-in-modular-scale($sassline-scale, $sassline-key) {
  $sassline-map: map-get($sassline-modular-scale, $sassline-scale);
  $sassline-output: map-has-key($sassline-map, $sassline-key);
  @return $sassline-output;
}

// Font-size in rems. Either set per breakpoint or for all.
// Use values as you would for pixels i.e. 16 or use values from the modular scale.
@mixin sassline-fontsize($sassline-fontsize, $sassline-breakpoint: 0) {
  // Type of chosen variables.
  $sassline-font-value: type-of($sassline-fontsize);
  $sassline-break-value: type-of($sassline-breakpoint);

  // Check if value exists in scale.
  $sassline-in-scale: sassline-in-modular-scale(scale-0, $sassline-fontsize);

  // If specifying a breakpoint to use (and breakpoint exists).
  @if $sassline-break-value == number and $sassline-breakpoint <= ($sassline-breakpoints-limit - 1) and $sassline-breakpoint >= 0 {

    // If using a number for fontsize.
    @if $sassline-font-value == number {
      font-size: #{$sassline-fontsize / nth($sassline-sizes, ($sassline-breakpoint + 1))}rem;

    // If using a variable from the scale for fontsize.
    } @else if $sassline-in-scale == true {
      $sassline-get-scale: map-get($sassline-modular-scale, scale-#{$sassline-breakpoint});
      $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);

      font-size: #{$sassline-get-size / nth($sassline-sizes, ($sassline-breakpoint + 1))}rem;

    } @else {
      @warn "#{$sassline-fontsize} is not a valid scale variable";
    }

  // If want to use value for all breakpoints.
  } @else if $sassline-breakpoint == all {

    // If using a number for fontsize.
    @if $sassline-font-value == number {
      font-size: #{$sassline-fontsize / nth($sassline-sizes, 1)}rem;

      // Loop through breakpoints.
      @for $i from 2 through $sassline-breakpoints-limit {
        @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
          font-size: #{$sassline-fontsize / nth($sassline-sizes, $i)}rem;
        }
      }

    // If using a variable from the scale for fontsize.
    } @else if $sassline-in-scale == true {
      $sassline-get-scale: map-get($sassline-modular-scale, scale-0);
      $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
      font-size: #{$sassline-get-size / nth($sassline-sizes, 1)}rem;

      // Loop through breakpoints.
      @for $i from 2 through $sassline-breakpoints-limit {
        $sassline-get-scale: map-get($sassline-modular-scale, scale-#{$i - 1});
        $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);

        @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
          font-size: #{$sassline-get-size / nth($sassline-sizes, $i)}rem;
        }
      }

    } @else {
      @warn "#{$sassline-fontsize} is not a valid scale variable";
    }

  } @else {
    @warn "#{$sassline-breakpoint} is not valid to use as a breakpoint";
  }
}

// Advanced baseline magic.
// ! Read the README to help understand what is going on here.
// Parts based on https://gist.github.com/razwan/10662500
@mixin sassline-baseline($sassline-fontsize, $sassline-font, $sassline-lineheight: 2, $sassline-below: 2, $sassline-breakpoint: 0) {
  // Type of chosen variables.
  $sassline-font-value: type-of($sassline-fontsize);
  $sassline-break-value: type-of($sassline-breakpoint);

  // Cap height
  $sassline-cap-height: map-get($sassline-font, cap-height);

  // Check if value exists in scale.
  $sassline-in-scale: sassline-in-modular-scale(scale-0, $sassline-fontsize);

  // Set the line-height.
  line-height: #{$sassline-lineheight}rem;

  // If specifying a breakpoint to use (and breakpoint exists).
  @if $sassline-break-value == number and $sassline-breakpoint <= ($sassline-breakpoints-limit - 1) and $sassline-breakpoint >= 0 {

    // If using a number for fontsize.
    @if $sassline-font-value == number {
      $sassline-rootsize: nth($sassline-sizes, ($sassline-breakpoint + 1));
      $sassline-baseline-shift: #{($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};

      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

    // If using a variable from the scale for fontsize.
    } @else if $sassline-in-scale == true {
      $sassline-get-scale: map-get($sassline-modular-scale, scale-#{$sassline-breakpoint});
      $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
      $sassline-rootsize: nth($sassline-sizes, ($sassline-breakpoint + 1));

      $sassline-baseline-shift: #{($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};

      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

    } @else {
      @warn "#{$sassline-fontsize} is not a valid scale variable";
    }

  // If want to use value for all breakpoints.
  } @else if $sassline-breakpoint == all {

    // If using a number for fontsize.
    @if $sassline-font-value == number {
      $sassline-rootsize: nth($sassline-sizes, 1);
      $sassline-baseline-shift: #{($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};

      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

      // Loop through breakpoints.
      @for $i from 2 through $sassline-breakpoints-limit {
        $sassline-rootsize: nth($sassline-sizes, $i);
        $sassline-baseline-shift: #{($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
        $sassline-baseline-push: #{$sassline-below - (($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};

        @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
          margin-bottom: #{$sassline-baseline-push}rem;
          padding-top: #{$sassline-baseline-shift}rem;
        }
      }

    // If using a variable from the scale for fontsize.
    } @else if $sassline-in-scale == true {
      $sassline-get-scale: map-get($sassline-modular-scale, scale-0);
      $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
      $sassline-rootsize: nth($sassline-sizes, 1);

      $sassline-baseline-shift: #{($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};

      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

      // Loop through breakpoints.
      @for $i from 2 through $sassline-breakpoints-limit {
        $sassline-get-scale: map-get($sassline-modular-scale, scale-#{$i - 1});
        $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
        $sassline-rootsize: nth($sassline-sizes, $i);

        $sassline-baseline-shift: #{($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
        $sassline-baseline-push: #{$sassline-below - (($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};

        @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
          margin-bottom: #{$sassline-baseline-push}rem;
          padding-top: #{$sassline-baseline-shift}rem;
        }
      }

    } @else {
      @warn "#{$sassline-fontsize} is not a valid scale variable";
    }

  } @else {
    @warn "#{$sassline-breakpoint} is not valid to use as a breakpoint";
  }
}

// Set fontsize and baseline at once. Mix of fontsize and baseline mixin.
@mixin sassline($sassline-fontsize, $sassline-font, $sassline-lineheight: 2, $sassline-below: 2, $sassline-breakpoint: 0) {
  $sassline-font-value: type-of($sassline-fontsize);
  $sassline-break-value: type-of($sassline-breakpoint);
  $sassline-cap-height: map-get($sassline-font, cap-height);
  $sassline-in-scale: sassline-in-modular-scale(scale-0, $sassline-fontsize);

  line-height: #{$sassline-lineheight}rem;

  @if $sassline-break-value == number and $sassline-breakpoint <= ($sassline-breakpoints-limit - 1) and $sassline-breakpoint >= 0 {

    @if $sassline-font-value == number {
      $sassline-rootsize: nth($sassline-sizes, ($sassline-breakpoint + 1));
      $sassline-baseline-shift: #{($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};
      font-size: #{$sassline-fontsize / nth($sassline-sizes, ($sassline-breakpoint + 1))}rem;
      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

    } @else if $sassline-in-scale == true {
      $sassline-get-scale: map-get($sassline-modular-scale, scale-#{$sassline-breakpoint});
      $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
      $sassline-rootsize: nth($sassline-sizes, ($sassline-breakpoint + 1));
      $sassline-baseline-shift: #{($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};
      font-size: #{$sassline-get-size / nth($sassline-sizes, ($sassline-breakpoint + 1))}rem;
      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

    } @else {
      @warn "#{$sassline-fontsize} is not a valid scale variable";
    }

  } @else if $sassline-breakpoint == all {

    @if $sassline-font-value == number {
      $sassline-rootsize: nth($sassline-sizes, 1);
      $sassline-baseline-shift: #{($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};
      font-size: #{$sassline-fontsize / nth($sassline-sizes, 1)}rem;
      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

      @for $i from 2 through $sassline-breakpoints-limit {
        $sassline-rootsize: nth($sassline-sizes, $i);
        $sassline-baseline-shift: #{($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
        $sassline-baseline-push: #{$sassline-below - (($sassline-fontsize / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-fontsize) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};
        @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
          font-size: #{$sassline-fontsize / nth($sassline-sizes, $i)}rem;
          margin-bottom: #{$sassline-baseline-push}rem;
          padding-top: #{$sassline-baseline-shift}rem;
        }
      }

    } @else if $sassline-in-scale == true {
      $sassline-get-scale: map-get($sassline-modular-scale, scale-0);
      $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
      $sassline-rootsize: nth($sassline-sizes, 1);
      $sassline-baseline-shift: #{($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
      $sassline-baseline-push: #{$sassline-below - (($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};
      font-size: #{$sassline-get-size / nth($sassline-sizes, 1)}rem;
      margin-bottom: #{$sassline-baseline-push}rem;
      padding-top: #{$sassline-baseline-shift}rem;

      @for $i from 2 through $sassline-breakpoints-limit {
        $sassline-get-scale: map-get($sassline-modular-scale, scale-#{$i - 1});
        $sassline-get-size: map-get($sassline-get-scale, $sassline-fontsize);
        $sassline-rootsize: nth($sassline-sizes, $i);
        $sassline-baseline-shift: #{($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001};
        $sassline-baseline-push: #{$sassline-below - (($sassline-get-size / 2 * (($sassline-lineheight * $sassline-rootsize / $sassline-get-size) - $sassline-cap-height)) / $sassline-rootsize + 0.00001)};
        @media screen and (min-width: nth($sassline-points, $i) / 16 * 1em ) {
          font-size: #{$sassline-get-size / nth($sassline-sizes, $i)}rem;
          margin-bottom: #{$sassline-baseline-push}rem;
          padding-top: #{$sassline-baseline-shift}rem;
        }
      }

    } @else {
      @warn "#{$sassline-fontsize} is not a valid scale variable";
    }

  } @else {
    @warn "#{$sassline-breakpoint} is not valid to use as a breakpoint";
  }
}

// Clearfix.
@mixin sassline-clearfix {
  &:before, &:after{
    display: table;
    content: "";
  }
  &:after{
    clear: both;
  }
}
